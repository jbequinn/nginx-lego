#!/bin/sh

DOMAIN="${DOMAIN:-""}"
DUCKDNS_TOKEN="${DUCKDNS_TOKEN:-""}"
EMAIL="${EMAIL:-""}"
SERVER="${SERVER:-""}"
RECREATE="${RECREATE:-false}"

echo_timestamp() {
  echo "$(date -u +"%Y/%m/%d %H:%M:%S") [INFO] - $1" | tee -a "/lego/logs/lego.log"
}

run_lego() {
  /usr/bin/lego \
    --accept-tos \
    --server=${SERVER} \
    --key-type ec384 \
    --domains ${DOMAIN} \
    --domains *.${DOMAIN} \
    --email ${EMAIL} \
    --path /lego \
    --dns duckdns \
    $1
}

mkdir -p "/lego/logs"
# keep the last run only
truncate -s0 "/lego/logs/lego.log"

echo_timestamp "- Checking SSL certificate."

if [ ! -d "/lego" ]; then
  echo_timestamp " * Directory /lego not found! Exiting."
  exit 1
fi

if [ -z "$DOMAIN" ]; then
  echo_timestamp " * Domain is not set! Exiting."
  exit 1
fi

if [ -z "$SERVER" ]; then
  echo_timestamp " * Server is not set! Exiting."
  exit 1
fi

if [ -z "$DUCKDNS_TOKEN" ]; then
  echo_timestamp " * DuckDNS token is not set! Exiting."
  exit 1
fi

if [ -z "$EMAIL" ]; then
  echo_timestamp " * Email is not set! Exiting."
  exit 1
fi

if [ "$RECREATE" = true ]; then
  echo_timestamp " * Deleting all existing certificate data."
  rm -rf /lego/*
  echo_timestamp "  + Data deleted."
fi

if [ -d "/lego/certificates" ]; then
  echo_timestamp " * Certificate directory exist."
  if openssl x509 -checkend $((60*60*24*29)) -noout -in "/lego/certificates/${DOMAIN}.crt"; then
    echo_timestamp " * Certificate is not expiring yet."
  else
    echo_timestamp " * Certificate is out of the renewal limit. Attempting renewal."
    run_lego renew
    nginx -s reload
  fi
else
  echo_timestamp " * Certificate does not exist. Will create a new one."
  run_lego run
  nginx -s reload
fi

echo_timestamp "- All done. Exiting."
exit 0
